<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Studio LH - Sistema Completo</title>
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#1f2937">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Studio LH">
    <link rel="apple-touch-icon" href="icon-192.png">
    <link rel="icon" type="image/png" sizes="192x192" href="icon-192.png">
    <link rel="icon" type="image/png" sizes="512x512" href="icon-512.png">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            box-sizing: border-box;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .notification {
            animation: slideIn 0.3s ease-out;
        }
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        .fade-in {
            animation: fadeIn 0.3s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .dark-card {
            background: linear-gradient(145deg, #2d3748, #1a202c);
            border: 1px solid #4a5568;
        }
        .dark-input {
            background-color: #2d3748;
            border-color: #4a5568;
            color: #e2e8f0;
        }
        .dark-input:focus {
            border-color: #63b3ed;
            box-shadow: 0 0 0 3px rgba(99, 179, 237, 0.1);
        }
        .dark-button {
            background: linear-gradient(145deg, #4299e1, #3182ce);
            transition: all 0.3s ease;
        }
        .dark-button:hover {
            background: linear-gradient(145deg, #3182ce, #2c5282);
            transform: translateY(-1px);
        }
        .glass-effect {
            backdrop-filter: blur(10px);
            background: rgba(45, 55, 72, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 min-h-screen text-gray-100">
    <!-- Tela de Login -->
    <div id="telaLogin" class="min-h-screen flex items-center justify-center">
        <div class="dark-card rounded-lg shadow-2xl p-8 w-full max-w-md">
            <div class="text-center mb-8">
                <div class="bg-gradient-to-r from-blue-500 to-purple-600 p-4 rounded-lg shadow-lg mx-auto w-16 h-16 flex items-center justify-center mb-4">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                    </svg>
                </div>
                <h1 class="text-3xl font-bold text-gray-100">Studio LH</h1>
                <p class="text-gray-400">Gest√£o Profissional de Tatuagem</p>
            </div>

            <div class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Selecionar Usu√°rio</label>
                    <select id="seletorUsuario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400">
                        <option value="">Escolha seu perfil</option>
                        <option value="admin">üëë Administrador (Propriet√°rio)</option>
                    </select>
                </div>

                <div id="campoSenha" class="hidden">
                    <label for="senhaLogin" class="block text-sm font-medium text-gray-300 mb-2">Senha</label>
                    <input type="password" id="senhaLogin" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Digite sua senha">
                </div>

                <button id="btnLogin" class="w-full dark-button text-white py-3 px-6 rounded-lg font-medium shadow-lg" disabled>
                    Entrar no Sistema
                </button>

                <div class="border-t border-gray-600 pt-6">
                    <h3 class="text-lg font-semibold text-gray-200 mb-3">Adicionar Funcion√°rio</h3>
                    <form id="formNovoFuncionario" class="space-y-4">
                        <div>
                            <label for="nomeFuncionario" class="block text-sm font-medium text-gray-300 mb-2">Nome do Funcion√°rio</label>
                            <input type="text" id="nomeFuncionario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Nome completo" required>
                        </div>
                        <div>
                            <label for="senhaFuncionario" class="block text-sm font-medium text-gray-300 mb-2">Senha Inicial</label>
                            <input type="password" id="senhaFuncionario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Senha para o funcion√°rio" required>
                        </div>
                        <button type="submit" class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-2 px-4 rounded-lg font-medium hover:from-green-700 hover:to-green-800 transition-all duration-200">
                            ‚ûï Adicionar Funcion√°rio
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div id="sistemaCompleto" class="container mx-auto px-4 py-6 hidden">
        <!-- Header -->
        <header class="dark-card rounded-lg shadow-2xl p-6 mb-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <div class="bg-gradient-to-r from-blue-500 to-purple-600 p-3 rounded-lg shadow-lg">
                        <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-2xl font-bold text-gray-100">Studio LH</h1>
                        <p class="text-gray-400">Gest√£o Profissional de Tatuagem</p>
                    </div>
                </div>
                <div class="text-right">
                    <div class="text-2xl font-bold text-green-400" id="totalBalance">R$ 0,00</div>
                    <p class="text-sm text-gray-400">Saldo Total</p>
                    <div class="mt-2 flex items-center space-x-2">
                        <span class="text-sm text-gray-400" id="usuarioLogado">Usu√°rio: Admin</span>
                        <button id="btnLogout" class="text-xs bg-red-600 text-white px-2 py-1 rounded hover:bg-red-700 transition-colors">
                            Sair
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Navigation Tabs -->
        <nav class="dark-card rounded-lg shadow-2xl mb-6">
            <div class="flex flex-wrap">
                <button class="tab-btn flex-1 py-4 px-6 text-center font-medium text-blue-400 bg-gray-700 border-b-2 border-blue-400" data-tab="agenda">
                    üìÖ Agenda
                </button>
                <button class="tab-btn flex-1 py-4 px-6 text-center font-medium text-gray-400 hover:text-blue-400 hover:bg-gray-700" data-tab="financeiro">
                    üí∞ Financeiro
                </button>
                <button class="tab-btn flex-1 py-4 px-6 text-center font-medium text-gray-400 hover:text-blue-400 hover:bg-gray-700" data-tab="clientes">
                    üë• Clientes
                </button>
                <button class="tab-btn flex-1 py-4 px-6 text-center font-medium text-gray-400 hover:text-blue-400 hover:bg-gray-700" data-tab="anamnese">
                    üìã Anamnese
                </button>
                <button class="tab-btn flex-1 py-4 px-6 text-center font-medium text-gray-400 hover:text-blue-400 hover:bg-gray-700" data-tab="admin">
                    ‚öôÔ∏è Admin
                </button>
                <button class="tab-btn flex-1 py-4 px-6 text-center font-medium text-gray-400 hover:text-blue-400 hover:bg-gray-700" data-tab="configuracoes">
                    üîß Config
                </button>
                <button class="tab-btn flex-1 py-4 px-6 text-center font-medium text-gray-400 hover:text-blue-400 hover:bg-gray-700" data-tab="usuarios" id="tabUsuarios">
                    üë• Usu√°rios
                </button>
            </div>
        </nav>

        <!-- Agenda Tab -->
        <div id="agenda" class="tab-content active">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Novo Agendamento -->
                <div class="lg:col-span-1">
                    <div class="dark-card rounded-lg shadow-2xl p-6">
                        <h2 class="text-xl font-bold text-gray-100 mb-4">Novo Agendamento</h2>
                        <form id="agendamentoForm" class="space-y-4">
                            <div>
                                <label for="clienteSelect" class="block text-sm font-medium text-gray-300 mb-2">Cliente</label>
                                <select id="clienteSelect" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" required>
                                    <option value="">Selecione um cliente</option>
                                </select>
                            </div>
                            <div>
                                <label for="servicoInput" class="block text-sm font-medium text-gray-300 mb-2">Servi√ßo</label>
                                <input type="text" id="servicoInput" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Ex: Consultoria Financeira" required>
                            </div>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label for="dataInput" class="block text-sm font-medium text-gray-300 mb-2">Data</label>
                                    <input type="date" id="dataInput" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" required>
                                </div>
                                <div>
                                    <label for="horaInput" class="block text-sm font-medium text-gray-300 mb-2">Hora</label>
                                    <input type="time" id="horaInput" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" required>
                                </div>
                            </div>
                            <div>
                                <label for="valorInput" class="block text-sm font-medium text-gray-300 mb-2">Valor (R$)</label>
                                <input type="number" id="valorInput" step="0.01" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="0,00" required>
                            </div>
                            <div>
                                <label for="imagemInput" class="block text-sm font-medium text-gray-300 mb-2">Imagem (opcional)</label>
                                <input type="file" id="imagemInput" accept="image/*" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400">
                            </div>
                            <div>
                                <label for="observacoesInput" class="block text-sm font-medium text-gray-300 mb-2">Observa√ß√µes</label>
                                <textarea id="observacoesInput" rows="3" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Observa√ß√µes adicionais..."></textarea>
                            </div>
                            <button type="submit" class="w-full dark-button text-white py-3 px-6 rounded-lg font-medium shadow-lg">
                                Agendar Servi√ßo
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Lista de Agendamentos -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-xl font-bold text-gray-800">Agendamentos</h2>
                            <div class="flex space-x-2">
                                <button id="filtroHoje" class="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors">Hoje</button>
                                <button id="filtroSemana" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">Esta Semana</button>
                                <button id="filtroTodos" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">Todos</button>
                            </div>
                        </div>
                        <div id="listaAgendamentos" class="space-y-4 max-h-96 overflow-y-auto">
                            <!-- Agendamentos ser√£o inseridos aqui -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Financeiro Tab -->
        <div id="financeiro" class="tab-content">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Resumo Financeiro -->
                <div class="lg:col-span-3">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                        <div class="bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-6 text-white">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-green-100">Receitas</p>
                                    <p class="text-2xl font-bold" id="totalReceitas">R$ 0,00</p>
                                </div>
                                <div class="bg-green-400 p-3 rounded-full">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gradient-to-r from-red-500 to-red-600 rounded-lg p-6 text-white">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-red-100">Despesas</p>
                                    <p class="text-2xl font-bold" id="totalDespesas">R$ 0,00</p>
                                </div>
                                <div class="bg-red-400 p-3 rounded-full">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-6 text-white">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-blue-100">Saldo</p>
                                    <p class="text-2xl font-bold" id="saldoAtual">R$ 0,00</p>
                                </div>
                                <div class="bg-blue-400 p-3 rounded-full">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg p-6 text-white">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-purple-100">Este M√™s</p>
                                    <p class="text-2xl font-bold" id="receitaMes">R$ 0,00</p>
                                </div>
                                <div class="bg-purple-400 p-3 rounded-full">
                                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Nova Transa√ß√£o -->
                <div class="lg:col-span-1">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Nova Transa√ß√£o</h2>
                        <form id="transacaoForm" class="space-y-4">
                            <div>
                                <label for="tipoTransacao" class="block text-sm font-medium text-gray-700 mb-2">Tipo</label>
                                <select id="tipoTransacao" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                                    <option value="receita">Receita</option>
                                    <option value="despesa">Despesa</option>
                                </select>
                            </div>
                            <div>
                                <label for="descricaoTransacao" class="block text-sm font-medium text-gray-700 mb-2">Descri√ß√£o</label>
                                <input type="text" id="descricaoTransacao" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Ex: Pagamento de cliente" required>
                            </div>
                            <div>
                                <label for="valorTransacao" class="block text-sm font-medium text-gray-700 mb-2">Valor (R$)</label>
                                <input type="number" id="valorTransacao" step="0.01" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="0,00" required>
                            </div>
                            <div>
                                <label for="dataTransacao" class="block text-sm font-medium text-gray-700 mb-2">Data</label>
                                <input type="date" id="dataTransacao" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                            </div>
                            <div>
                                <label for="categoriaTransacao" class="block text-sm font-medium text-gray-700 mb-2">Categoria</label>
                                <select id="categoriaTransacao" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" required>
                                    <option value="servicos">Servi√ßos</option>
                                    <option value="consultoria">Consultoria</option>
                                    <option value="material">Material</option>
                                    <option value="marketing">Marketing</option>
                                    <option value="outros">Outros</option>
                                </select>
                            </div>
                            <button type="submit" class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-6 rounded-lg font-medium hover:from-green-700 hover:to-green-800 transition-all duration-200">
                                Adicionar Transa√ß√£o
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Hist√≥rico de Transa√ß√µes -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Hist√≥rico de Transa√ß√µes</h2>
                        <div id="listaTransacoes" class="space-y-3 max-h-96 overflow-y-auto">
                            <!-- Transa√ß√µes ser√£o inseridas aqui -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Anamnese Tab -->
        <div id="anamnese" class="tab-content">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Sele√ß√£o de Modelo -->
                <div class="lg:col-span-1">
                    <div class="dark-card rounded-lg shadow-2xl p-6 mb-6">
                        <h2 class="text-xl font-bold text-gray-100 mb-4">Modelos de Anamnese</h2>
                        <div class="space-y-3">
                            <button onclick="selecionarModelo('basico')" class="w-full p-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200">
                                üìù Modelo B√°sico
                            </button>
                            <button onclick="selecionarModelo('completo')" class="w-full p-3 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-lg hover:from-purple-700 hover:to-purple-800 transition-all duration-200">
                                üìã Modelo Completo
                            </button>
                            <button onclick="selecionarModelo('detalhado')" class="w-full p-3 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-200">
                                üìä Modelo Detalhado
                            </button>
                        </div>
                    </div>

                    <!-- Formul√°rio de Anamnese -->
                    <div class="dark-card rounded-lg shadow-2xl p-6">
                        <h2 class="text-xl font-bold text-gray-100 mb-4">Nova Anamnese</h2>
                        <form id="anamneseForm" class="space-y-4">
                            <div>
                                <label for="clienteAnamnese" class="block text-sm font-medium text-gray-300 mb-2">Cliente</label>
                                <select id="clienteAnamnese" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" required>
                                    <option value="">Selecione um cliente</option>
                                </select>
                            </div>
                            <div id="camposAnamnese" class="space-y-4">
                                <!-- Campos ser√£o inseridos dinamicamente -->
                            </div>
                            <button type="submit" class="w-full dark-button text-white py-3 px-6 rounded-lg font-medium shadow-lg">
                                Salvar Anamnese
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Lista de Anamneses -->
                <div class="lg:col-span-2">
                    <div class="dark-card rounded-lg shadow-2xl p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-xl font-bold text-gray-100">Anamneses Realizadas</h2>
                            <input type="text" id="searchAnamnese" placeholder="Buscar por cliente..." class="px-4 py-2 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400">
                        </div>
                        <div id="listaAnamneses" class="space-y-4 max-h-96 overflow-y-auto">
                            <!-- Anamneses ser√£o inseridas aqui -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Clientes Tab -->
        <div id="clientes" class="tab-content">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Novo Cliente -->
                <div class="lg:col-span-1">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Novo Cliente</h2>
                        <form id="clienteForm" class="space-y-4">
                            <div>
                                <label for="nomeCliente" class="block text-sm font-medium text-gray-700 mb-2">Nome Completo</label>
                                <input type="text" id="nomeCliente" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Nome do cliente" required>
                            </div>
                            <div>
                                <label for="emailCliente" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                <input type="email" id="emailCliente" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="email@exemplo.com">
                            </div>
                            <div>
                                <label for="telefoneCliente" class="block text-sm font-medium text-gray-700 mb-2">WhatsApp</label>
                                <input type="tel" id="telefoneCliente" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="(11) 99999-9999" required>
                            </div>
                            <div>
                                <label for="enderecoCliente" class="block text-sm font-medium text-gray-700 mb-2">Endere√ßo</label>
                                <textarea id="enderecoCliente" rows="3" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" placeholder="Endere√ßo completo"></textarea>
                            </div>
                            <button type="submit" class="w-full bg-gradient-to-r from-purple-600 to-purple-700 text-white py-3 px-6 rounded-lg font-medium hover:from-purple-700 hover:to-purple-800 transition-all duration-200">
                                Cadastrar Cliente
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Lista de Clientes -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-xl font-bold text-gray-800">Clientes Cadastrados</h2>
                            <div class="flex space-x-2">
                                <input type="text" id="searchClientes" placeholder="Buscar cliente..." class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            </div>
                        </div>
                        <div id="listaClientes" class="space-y-4 max-h-96 overflow-y-auto">
                            <!-- Clientes ser√£o inseridos aqui -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Configura√ß√µes Tab -->
        <div id="configuracoes" class="tab-content">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Configura√ß√µes de Seguran√ßa -->
                <div class="dark-card rounded-lg shadow-2xl p-6">
                    <h2 class="text-xl font-bold text-gray-100 mb-4">üîê Seguran√ßa</h2>
                    <div class="space-y-4">
                        <div id="senhaStatus" class="p-4 bg-yellow-900 border border-yellow-600 rounded-lg">
                            <p class="text-yellow-200">‚ö†Ô∏è Nenhuma senha configurada. Configure uma senha para proteger seus dados.</p>
                        </div>
                        
                        <form id="senhaForm" class="space-y-4">
                            <div>
                                <label for="senhaAtual" class="block text-sm font-medium text-gray-300 mb-2">Senha Atual (se j√° configurada)</label>
                                <input type="password" id="senhaAtual" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Digite a senha atual">
                            </div>
                            <div>
                                <label for="novaSenha" class="block text-sm font-medium text-gray-300 mb-2">Nova Senha</label>
                                <input type="password" id="novaSenha" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Digite a nova senha" required>
                            </div>
                            <div>
                                <label for="confirmarSenha" class="block text-sm font-medium text-gray-300 mb-2">Confirmar Nova Senha</label>
                                <input type="password" id="confirmarSenha" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Confirme a nova senha" required>
                            </div>
                            <button type="submit" class="w-full dark-button text-white py-3 px-6 rounded-lg font-medium shadow-lg">
                                Alterar Senha
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Banco de Dados -->
                <div class="dark-card rounded-lg shadow-2xl p-6">
                    <h2 class="text-xl font-bold text-gray-100 mb-4">üíæ Banco de Dados</h2>
                    <div class="space-y-4">
                        <div class="p-4 bg-green-900 border border-green-600 rounded-lg">
                            <p class="text-green-200">‚úÖ Dados salvos permanentemente no dispositivo</p>
                            <p class="text-sm text-green-300 mt-1">√öltima atualiza√ß√£o: <span id="ultimaAtualizacao">Nunca</span></p>
                            <p class="text-xs text-green-400 mt-1">Auto-save ativo ‚Ä¢ Backup triplo ‚Ä¢ Recupera√ß√£o autom√°tica</p>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <button id="exportarDados" class="dark-button text-white py-3 px-4 rounded-lg font-medium shadow-lg">
                                üì§ Exportar
                            </button>
                            <button id="importarDados" class="bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-4 rounded-lg font-medium hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-lg">
                                üì• Importar
                            </button>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <button id="criarBackupManual" class="bg-gradient-to-r from-blue-600 to-blue-700 text-white py-2 px-4 rounded-lg font-medium hover:from-blue-700 hover:to-blue-800 transition-all duration-200 shadow-lg">
                                üíæ Backup Manual
                            </button>
                            <button id="recuperarDados" class="bg-gradient-to-r from-purple-600 to-purple-700 text-white py-2 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-purple-800 transition-all duration-200 shadow-lg">
                                üîÑ Recuperar Dados
                            </button>
                        </div>
                        
                        <input type="file" id="arquivoImportar" accept=".json" class="hidden">
                        
                        <div class="border-t border-gray-600 pt-4">
                            <h3 class="text-lg font-semibold text-gray-200 mb-3">Status do Banco</h3>
                            <div class="space-y-2">
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-400">Tamanho dos dados:</span>
                                    <span class="text-gray-200" id="tamanhoDb">0 KB</span>
                                </div>
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-400">Registros totais:</span>
                                    <span class="text-gray-200" id="totalRegistros">0</span>
                                </div>
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-400">Backups dispon√≠veis:</span>
                                    <span class="text-gray-200" id="totalBackups">0</span>
                                </div>
                                <div class="flex justify-between text-sm">
                                    <span class="text-gray-400">Status de seguran√ßa:</span>
                                    <span class="text-green-400" id="statusSeguranca">üîí Protegido</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="border-t border-gray-600 pt-4">
                            <h4 class="text-md font-semibold text-gray-200 mb-2">Backups Autom√°ticos</h4>
                            <div id="listaBackups" class="space-y-1 max-h-32 overflow-y-auto">
                                <!-- Lista de backups ser√° inserida aqui -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Configura√ß√µes Gerais -->
                <div class="lg:col-span-2">
                    <div class="dark-card rounded-lg shadow-2xl p-6">
                        <h2 class="text-xl font-bold text-gray-100 mb-4">‚öôÔ∏è Configura√ß√µes Gerais</h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-200 mb-3">Notifica√ß√µes WhatsApp</h3>
                                <div class="space-y-3">
                                    <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                                        <span class="text-gray-200">Lembrete 24h antes</span>
                                        <input type="checkbox" id="lembrete24h" class="w-5 h-5 text-blue-600 rounded focus:ring-blue-500" checked>
                                    </div>
                                    <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                                        <span class="text-gray-200">Lembrete 2h antes</span>
                                        <input type="checkbox" id="lembrete2h" class="w-5 h-5 text-blue-600 rounded focus:ring-blue-500" checked>
                                    </div>
                                    <div class="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                                        <span class="text-gray-200">Auto-backup di√°rio</span>
                                        <input type="checkbox" id="autoBackup" class="w-5 h-5 text-blue-600 rounded focus:ring-blue-500">
                                    </div>
                                    <button id="editarMensagemWhatsApp" class="w-full mt-3 bg-gradient-to-r from-green-600 to-green-700 text-white py-2 px-4 rounded-lg font-medium hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-lg">
                                        ‚úèÔ∏è Editar Mensagem
                                    </button>
                                </div>
                            </div>
                            <div>
                                <h3 class="text-lg font-semibold text-gray-200 mb-3">Cores dos Agendamentos</h3>
                                <div class="space-y-3">
                                    <div>
                                        <label class="block text-sm text-gray-300 mb-1">Agendado</label>
                                        <input type="color" id="corAgendado" value="#3b82f6" class="w-full h-10 rounded border-gray-600">
                                    </div>
                                    <div>
                                        <label class="block text-sm text-gray-300 mb-1">Conclu√≠do</label>
                                        <input type="color" id="corConcluido" value="#10b981" class="w-full h-10 rounded border-gray-600">
                                    </div>
                                    <div>
                                        <label class="block text-sm text-gray-300 mb-1">Cancelado</label>
                                        <input type="color" id="corCancelado" value="#ef4444" class="w-full h-10 rounded border-gray-600">
                                    </div>
                                    <button id="salvarCores" class="w-full bg-gradient-to-r from-indigo-600 to-indigo-700 text-white py-2 px-4 rounded-lg font-medium hover:from-indigo-700 hover:to-indigo-800 transition-all duration-200 shadow-lg">
                                        üé® Salvar Cores
                                    </button>
                                </div>
                            </div>
                            <div>
                                <h3 class="text-lg font-semibold text-gray-200 mb-3">A√ß√µes Avan√ßadas</h3>
                                <div class="space-y-3">
                                    <button id="limparCache" class="w-full bg-gradient-to-r from-orange-600 to-orange-700 text-white py-2 px-4 rounded-lg font-medium hover:from-orange-700 hover:to-orange-800 transition-all duration-200 shadow-lg">
                                        üßπ Limpar Cache
                                    </button>
                                    <button id="resetarApp" class="w-full bg-gradient-to-r from-red-600 to-red-700 text-white py-2 px-4 rounded-lg font-medium hover:from-red-700 hover:to-red-800 transition-all duration-200 shadow-lg">
                                        üîÑ Resetar Aplicativo
                                    </button>
                                    <button id="testarConexao" class="w-full bg-gradient-to-r from-purple-600 to-purple-700 text-white py-2 px-4 rounded-lg font-medium hover:from-purple-700 hover:to-purple-800 transition-all duration-200 shadow-lg">
                                        üîó Testar Conex√£o
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Usu√°rios Tab -->
        <div id="usuarios" class="tab-content">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Gerenciar Funcion√°rios -->
                <div class="dark-card rounded-lg shadow-2xl p-6">
                    <h2 class="text-xl font-bold text-gray-100 mb-4">üë• Gerenciar Funcion√°rios</h2>
                    <div id="listaFuncionarios" class="space-y-4 mb-6">
                        <!-- Lista de funcion√°rios ser√° inserida aqui -->
                    </div>
                    
                    <div class="border-t border-gray-600 pt-6">
                        <h3 class="text-lg font-semibold text-gray-200 mb-3">Adicionar Novo Funcion√°rio</h3>
                        <form id="formAdicionarFuncionario" class="space-y-4">
                            <div>
                                <label for="nomeNovoFuncionario" class="block text-sm font-medium text-gray-300 mb-2">Nome do Funcion√°rio</label>
                                <input type="text" id="nomeNovoFuncionario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Nome completo" required>
                            </div>
                            <div>
                                <label for="senhaNovoFuncionario" class="block text-sm font-medium text-gray-300 mb-2">Senha Inicial</label>
                                <input type="password" id="senhaNovoFuncionario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Senha para o funcion√°rio" required>
                            </div>
                            <button type="submit" class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-6 rounded-lg font-medium hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-lg">
                                ‚ûï Adicionar Funcion√°rio
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Configura√ß√µes de Usu√°rio -->
                <div class="dark-card rounded-lg shadow-2xl p-6">
                    <h2 class="text-xl font-bold text-gray-100 mb-4">üîê Minha Conta</h2>
                    <div class="space-y-6">
                        <div class="p-4 bg-blue-900 border border-blue-600 rounded-lg">
                            <p class="text-blue-200">‚ÑπÔ∏è Usu√°rio atual: <span id="nomeUsuarioAtual" class="font-semibold">Admin</span></p>
                            <p class="text-sm text-blue-300 mt-1">Tipo: <span id="tipoUsuarioAtual">Administrador</span></p>
                        </div>
                        
                        <form id="formAlterarSenhaUsuario" class="space-y-4">
                            <div>
                                <label for="senhaAtualUsuario" class="block text-sm font-medium text-gray-300 mb-2">Senha Atual</label>
                                <input type="password" id="senhaAtualUsuario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Digite sua senha atual">
                            </div>
                            <div>
                                <label for="novaSenhaUsuario" class="block text-sm font-medium text-gray-300 mb-2">Nova Senha</label>
                                <input type="password" id="novaSenhaUsuario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Digite a nova senha" required>
                            </div>
                            <div>
                                <label for="confirmarSenhaUsuario" class="block text-sm font-medium text-gray-300 mb-2">Confirmar Nova Senha</label>
                                <input type="password" id="confirmarSenhaUsuario" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Confirme a nova senha" required>
                            </div>
                            <button type="submit" class="w-full dark-button text-white py-3 px-6 rounded-lg font-medium shadow-lg">
                                üîí Alterar Minha Senha
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Estat√≠sticas dos Usu√°rios -->
                <div class="lg:col-span-2">
                    <div class="dark-card rounded-lg shadow-2xl p-6">
                        <h2 class="text-xl font-bold text-gray-100 mb-4">üìä Estat√≠sticas dos Usu√°rios</h2>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                            <div class="bg-gradient-to-r from-blue-600 to-blue-700 rounded-lg p-6 text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-blue-100">Total de Usu√°rios</p>
                                        <p class="text-2xl font-bold" id="totalUsuarios">1</p>
                                    </div>
                                    <div class="bg-blue-500 p-3 rounded-full">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-green-600 to-green-700 rounded-lg p-6 text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-green-100">Funcion√°rios Ativos</p>
                                        <p class="text-2xl font-bold" id="funcionariosAtivos">0</p>
                                    </div>
                                    <div class="bg-green-500 p-3 rounded-full">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-gradient-to-r from-purple-600 to-purple-700 rounded-lg p-6 text-white">
                                <div class="flex items-center justify-between">
                                    <div>
                                        <p class="text-purple-100">√öltimo Login</p>
                                        <p class="text-lg font-bold" id="ultimoLogin">Agora</p>
                                    </div>
                                    <div class="bg-purple-500 p-3 rounded-full">
                                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Admin Tab -->
        <div id="admin" class="tab-content">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Backup e Restaura√ß√£o -->
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Backup dos Dados</h2>
                    <div class="space-y-4">
                        <p class="text-gray-600">Fa√ßa backup de todos os seus dados para n√£o perder informa√ß√µes importantes.</p>
                        <button id="backupBtn" class="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-lg font-medium hover:from-blue-700 hover:to-blue-800 transition-all duration-200">
                            üì• Fazer Backup
                        </button>
                        <div class="border-t pt-4">
                            <label for="restoreFile" class="block text-sm font-medium text-gray-700 mb-2">Restaurar Backup</label>
                            <input type="file" id="restoreFile" accept=".json" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 mb-3">
                            <button id="restoreBtn" class="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-6 rounded-lg font-medium hover:from-green-700 hover:to-green-800 transition-all duration-200">
                                üì§ Restaurar Dados
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Estat√≠sticas -->
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <h2 class="text-xl font-bold text-gray-800 mb-4">Estat√≠sticas do Sistema</h2>
                    <div class="space-y-4">
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                            <span class="text-gray-700">Total de Clientes:</span>
                            <span class="font-bold text-blue-600" id="totalClientes">0</span>
                        </div>
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                            <span class="text-gray-700">Agendamentos Hoje:</span>
                            <span class="font-bold text-green-600" id="agendamentosHoje">0</span>
                        </div>
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                            <span class="text-gray-700">Receita do M√™s:</span>
                            <span class="font-bold text-purple-600" id="receitaMesAdmin">R$ 0,00</span>
                        </div>
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                            <span class="text-gray-700">Transa√ß√µes Totais:</span>
                            <span class="font-bold text-orange-600" id="totalTransacoes">0</span>
                        </div>
                    </div>
                </div>

                <!-- Configura√ß√µes -->
                <div class="lg:col-span-2">
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <h2 class="text-xl font-bold text-gray-800 mb-4">Configura√ß√µes</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-700 mb-3">Lembretes WhatsApp</h3>
                                <div class="space-y-3">
                                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                        <span class="text-gray-700">Lembrete 24h antes</span>
                                        <input type="checkbox" id="lembrete24h" class="w-5 h-5 text-blue-600 rounded focus:ring-blue-500" checked>
                                    </div>
                                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                        <span class="text-gray-700">Lembrete 2h antes</span>
                                        <input type="checkbox" id="lembrete2h" class="w-5 h-5 text-blue-600 rounded focus:ring-blue-500" checked>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <h3 class="text-lg font-semibold text-gray-700 mb-3">A√ß√µes do Sistema</h3>
                                <div class="space-y-3">
                                    <button id="limparDados" class="w-full bg-gradient-to-r from-red-600 to-red-700 text-white py-2 px-4 rounded-lg font-medium hover:from-red-700 hover:to-red-800 transition-all duration-200">
                                        üóëÔ∏è Limpar Todos os Dados
                                    </button>
                                    <button id="exportarRelatorio" class="w-full bg-gradient-to-r from-indigo-600 to-indigo-700 text-white py-2 px-4 rounded-lg font-medium hover:from-indigo-700 hover:to-indigo-800 transition-all duration-200">
                                        üìä Exportar Relat√≥rio
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification Container -->
    <div id="notifications" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <!-- Modal de Confirma√ß√£o -->
    <div id="confirmModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
        <div class="bg-white rounded-lg p-6 max-w-md mx-4">
            <h3 class="text-lg font-bold text-gray-800 mb-4" id="confirmTitle">Confirmar A√ß√£o</h3>
            <p class="text-gray-600 mb-6" id="confirmMessage">Tem certeza que deseja realizar esta a√ß√£o?</p>
            <div class="flex space-x-4">
                <button id="confirmCancel" class="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition-colors">
                    Cancelar
                </button>
                <button id="confirmOk" class="flex-1 bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 transition-colors">
                    Confirmar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de Mensagem WhatsApp -->
    <div id="whatsappModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
        <div class="dark-card rounded-lg p-6 max-w-lg mx-4 w-full">
            <h3 class="text-lg font-bold text-gray-100 mb-4">‚úèÔ∏è Editar Mensagem do WhatsApp</h3>
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Mensagem de Lembrete</label>
                    <textarea id="mensagemWhatsApp" rows="6" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" placeholder="Digite sua mensagem personalizada...">Ol√° {nome}! Lembrete do seu agendamento:

Servi√ßo: {servico}
Data: {data}
Hor√°rio: {hora}
Valor: {valor}

Nos vemos em breve no Studio LH! üé®</textarea>
                </div>
                <div class="text-sm text-gray-400">
                    <p class="mb-2">Vari√°veis dispon√≠veis:</p>
                    <div class="grid grid-cols-2 gap-2 text-xs">
                        <span>{nome} - Nome do cliente</span>
                        <span>{servico} - Tipo de servi√ßo</span>
                        <span>{data} - Data do agendamento</span>
                        <span>{hora} - Hor√°rio</span>
                        <span>{valor} - Valor do servi√ßo</span>
                    </div>
                </div>
            </div>
            <div class="flex space-x-4 mt-6">
                <button id="cancelarMensagem" class="flex-1 bg-gray-600 text-white py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors">
                    Cancelar
                </button>
                <button id="salvarMensagem" class="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors">
                    Salvar
                </button>
            </div>
        </div>
    </div>

    <!-- Modal de Visualizar Anamnese -->
    <div id="anamneseModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
        <div class="dark-card rounded-lg p-6 max-w-4xl mx-4 w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-bold text-gray-100">üìã Visualizar Anamnese</h3>
                <button id="fecharAnamneseModal" class="text-gray-400 hover:text-gray-200">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div id="conteudoAnamneseModal" class="space-y-4">
                <!-- Conte√∫do da anamnese ser√° inserido aqui -->
            </div>
        </div>
    </div>

    <script>
        // Sistema de usu√°rios
        let sistemaUsuarios = {
            usuarioAtual: null,
            usuarios: {
                admin: {
                    nome: 'Administrador',
                    tipo: 'admin',
                    senhaHash: null,
                    dados: {
                        clientes: [],
                        agendamentos: [],
                        transacoes: [],
                        anamneses: [],
                        configuracoes: {
                            lembrete24h: true,
                            lembrete2h: true,
                            autoBackup: false,
                            mensagemWhatsApp: `Ol√° {nome}! Lembrete do seu agendamento:

Servi√ßo: {servico}
Data: {data}
Hor√°rio: {hora}
Valor: {valor}

Nos vemos em breve no Studio LH! üé®`,
                            cores: {
                                agendado: '#3b82f6',
                                concluido: '#10b981',
                                cancelado: '#ef4444'
                            }
                        }
                    }
                }
            }
        };

        // Dados do usu√°rio atual
        let dados = {};

        // Sistema de autentica√ß√£o
        let sistemaDesbloqueado = false;

        // Modelos de anamnese para tatuagem
        const modelosAnamnese = {
            basico: [
                { nome: 'nome', label: 'Nome Completo', tipo: 'text', obrigatorio: true },
                { nome: 'idade', label: 'Idade', tipo: 'number', obrigatorio: true },
                { nome: 'telefone', label: 'Telefone/WhatsApp', tipo: 'tel', obrigatorio: true },
                { nome: 'email', label: 'E-mail', tipo: 'email', obrigatorio: false },
                { nome: 'primeira_tatuagem', label: '√â sua primeira tatuagem?', tipo: 'radio', opcoes: ['Sim', 'N√£o'], obrigatorio: true },
                { nome: 'local_tatuagem', label: 'Local da tatuagem', tipo: 'text', obrigatorio: true },
                { nome: 'tamanho_estimado', label: 'Tamanho estimado', tipo: 'select', opcoes: ['Pequena (at√© 5cm)', 'M√©dia (5-15cm)', 'Grande (15-30cm)', 'Extra Grande (30cm+)'], obrigatorio: true },
                { nome: 'estilo_desejado', label: 'Estilo desejado', tipo: 'text', obrigatorio: true },
                { nome: 'alergias', label: 'Possui alguma alergia?', tipo: 'textarea', obrigatorio: true },
                { nome: 'medicamentos', label: 'Toma algum medicamento?', tipo: 'textarea', obrigatorio: true },
                { nome: 'observacoes', label: 'Observa√ß√µes adicionais', tipo: 'textarea', obrigatorio: false }
            ],
            completo: [
                { nome: 'nome', label: 'Nome Completo', tipo: 'text', obrigatorio: true },
                { nome: 'idade', label: 'Idade', tipo: 'number', obrigatorio: true },
                { nome: 'telefone', label: 'Telefone/WhatsApp', tipo: 'tel', obrigatorio: true },
                { nome: 'email', label: 'E-mail', tipo: 'email', obrigatorio: false },
                { nome: 'endereco', label: 'Endere√ßo completo', tipo: 'textarea', obrigatorio: false },
                { nome: 'primeira_tatuagem', label: '√â sua primeira tatuagem?', tipo: 'radio', opcoes: ['Sim', 'N√£o'], obrigatorio: true },
                { nome: 'quantas_tatuagens', label: 'Se n√£o √© a primeira, quantas tatuagens possui?', tipo: 'number', obrigatorio: false },
                { nome: 'local_tatuagem', label: 'Local da tatuagem', tipo: 'text', obrigatorio: true },
                { nome: 'tamanho_estimado', label: 'Tamanho estimado', tipo: 'select', opcoes: ['Pequena (at√© 5cm)', 'M√©dia (5-15cm)', 'Grande (15-30cm)', 'Extra Grande (30cm+)'], obrigatorio: true },
                { nome: 'estilo_desejado', label: 'Estilo desejado', tipo: 'text', obrigatorio: true },
                { nome: 'cores', label: 'Cores desejadas', tipo: 'checkbox', opcoes: ['Preto e cinza', 'Colorida', 'Apenas contorno'], obrigatorio: true },
                { nome: 'inspiracao', label: 'Tem alguma inspira√ß√£o/refer√™ncia?', tipo: 'textarea', obrigatorio: false },
                { nome: 'alergias', label: 'Possui alguma alergia?', tipo: 'textarea', obrigatorio: true },
                { nome: 'medicamentos', label: 'Toma algum medicamento?', tipo: 'textarea', obrigatorio: true },
                { nome: 'problemas_saude', label: 'Possui algum problema de sa√∫de?', tipo: 'textarea', obrigatorio: true },
                { nome: 'gravidez', label: 'Est√° gr√°vida ou amamentando?', tipo: 'radio', opcoes: ['Sim', 'N√£o', 'N√£o se aplica'], obrigatorio: true },
                { nome: 'cicatrizacao', label: 'Como √© sua cicatriza√ß√£o normalmente?', tipo: 'select', opcoes: ['R√°pida', 'Normal', 'Lenta', 'N√£o sei'], obrigatorio: true },
                { nome: 'orcamento', label: 'Or√ßamento dispon√≠vel', tipo: 'text', obrigatorio: false },
                { nome: 'observacoes', label: 'Observa√ß√µes adicionais', tipo: 'textarea', obrigatorio: false }
            ],
            detalhado: [
                { nome: 'nome', label: 'Nome Completo', tipo: 'text', obrigatorio: true },
                { nome: 'idade', label: 'Idade', tipo: 'number', obrigatorio: true },
                { nome: 'telefone', label: 'Telefone/WhatsApp', tipo: 'tel', obrigatorio: true },
                { nome: 'email', label: 'E-mail', tipo: 'email', obrigatorio: false },
                { nome: 'endereco', label: 'Endere√ßo completo', tipo: 'textarea', obrigatorio: false },
                { nome: 'profissao', label: 'Profiss√£o', tipo: 'text', obrigatorio: false },
                { nome: 'primeira_tatuagem', label: '√â sua primeira tatuagem?', tipo: 'radio', opcoes: ['Sim', 'N√£o'], obrigatorio: true },
                { nome: 'quantas_tatuagens', label: 'Se n√£o √© a primeira, quantas tatuagens possui?', tipo: 'number', obrigatorio: false },
                { nome: 'ultima_tatuagem', label: 'Quando fez a √∫ltima tatuagem?', tipo: 'text', obrigatorio: false },
                { nome: 'local_tatuagem', label: 'Local da tatuagem', tipo: 'text', obrigatorio: true },
                { nome: 'tamanho_estimado', label: 'Tamanho estimado', tipo: 'select', opcoes: ['Pequena (at√© 5cm)', 'M√©dia (5-15cm)', 'Grande (15-30cm)', 'Extra Grande (30cm+)'], obrigatorio: true },
                { nome: 'estilo_desejado', label: 'Estilo desejado', tipo: 'text', obrigatorio: true },
                { nome: 'cores', label: 'Cores desejadas', tipo: 'checkbox', opcoes: ['Preto e cinza', 'Colorida', 'Apenas contorno'], obrigatorio: true },
                { nome: 'inspiracao', label: 'Tem alguma inspira√ß√£o/refer√™ncia?', tipo: 'textarea', obrigatorio: false },
                { nome: 'significado', label: 'A tatuagem tem algum significado especial?', tipo: 'textarea', obrigatorio: false },
                { nome: 'alergias', label: 'Possui alguma alergia?', tipo: 'textarea', obrigatorio: true },
                { nome: 'medicamentos', label: 'Toma algum medicamento?', tipo: 'textarea', obrigatorio: true },
                { nome: 'problemas_saude', label: 'Possui algum problema de sa√∫de?', tipo: 'textarea', obrigatorio: true },
                { nome: 'diabetes', label: '√â diab√©tico?', tipo: 'radio', opcoes: ['Sim', 'N√£o'], obrigatorio: true },
                { nome: 'pressao_alta', label: 'Tem press√£o alta?', tipo: 'radio', opcoes: ['Sim', 'N√£o'], obrigatorio: true },
                { nome: 'gravidez', label: 'Est√° gr√°vida ou amamentando?', tipo: 'radio', opcoes: ['Sim', 'N√£o', 'N√£o se aplica'], obrigatorio: true },
                { nome: 'cicatrizacao', label: 'Como √© sua cicatriza√ß√£o normalmente?', tipo: 'select', opcoes: ['R√°pida', 'Normal', 'Lenta', 'N√£o sei'], obrigatorio: true },
                { nome: 'queloides', label: 'J√° teve queloides?', tipo: 'radio', opcoes: ['Sim', 'N√£o', 'N√£o sei'], obrigatorio: true },
                { nome: 'alcool_drogas', label: 'Consumiu √°lcool ou drogas nas √∫ltimas 24h?', tipo: 'radio', opcoes: ['Sim', 'N√£o'], obrigatorio: true },
                { nome: 'doacao_sangue', label: 'Doou sangue recentemente?', tipo: 'radio', opcoes: ['Sim', 'N√£o'], obrigatorio: true },
                { nome: 'orcamento', label: 'Or√ßamento dispon√≠vel', tipo: 'text', obrigatorio: false },
                { nome: 'prazo', label: 'Tem algum prazo espec√≠fico?', tipo: 'text', obrigatorio: false },
                { nome: 'cuidados_pos', label: 'Conhece os cuidados p√≥s-tatuagem?', tipo: 'radio', opcoes: ['Sim', 'N√£o', 'Parcialmente'], obrigatorio: true },
                { nome: 'observacoes', label: 'Observa√ß√µes adicionais', tipo: 'textarea', obrigatorio: false }
            ]
        };

        // Fun√ß√£o para hash da senha (simples para demonstra√ß√£o)
        function hashSenha(senha) {
            let hash = 0;
            for (let i = 0; i < senha.length; i++) {
                const char = senha.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // Converter para 32bit
            }
            return hash.toString();
        }

        // Sistema de armazenamento permanente na nuvem
        const STORAGE_KEY = 'studioLH_sistemaCompleto';
        const BACKUP_KEY = 'studioLH_backup';
        
        // Carregar sistema de usu√°rios com backup autom√°tico
        function carregarSistemaUsuarios() {
            try {
                // Tentar carregar dados principais
                const sistemaUsuariosSalvo = localStorage.getItem(STORAGE_KEY);
                if (sistemaUsuariosSalvo) {
                    sistemaUsuarios = JSON.parse(sistemaUsuariosSalvo);
                    mostrarNotificacao('‚úÖ Dados carregados com sucesso!');
                } else {
                    // Tentar carregar backup se dados principais n√£o existirem
                    const backupSalvo = localStorage.getItem(BACKUP_KEY);
                    if (backupSalvo) {
                        sistemaUsuarios = JSON.parse(backupSalvo);
                        salvarSistemaUsuarios(); // Restaurar dados principais
                        mostrarNotificacao('üîÑ Dados restaurados do backup!');
                    } else {
                        mostrarNotificacao('üì± Primeira vez usando o app - dados inicializados!');
                    }
                }
            } catch (error) {
                console.error('Erro ao carregar dados:', error);
                mostrarNotificacao('‚ö†Ô∏è Erro ao carregar dados, usando configura√ß√£o padr√£o', 'error');
            }
            atualizarSeletorUsuarios();
        }

        // Salvar sistema de usu√°rios com backup triplo
        function salvarSistemaUsuarios() {
            try {
                const dadosString = JSON.stringify(sistemaUsuarios);
                
                // Salvar dados principais
                localStorage.setItem(STORAGE_KEY, dadosString);
                
                // Criar backup autom√°tico
                localStorage.setItem(BACKUP_KEY, dadosString);
                
                // Backup com timestamp
                const timestamp = new Date().toISOString();
                localStorage.setItem(`${STORAGE_KEY}_${timestamp.split('T')[0]}`, dadosString);
                
                // Limpar backups antigos (manter apenas os √∫ltimos 7 dias)
                limparBackupsAntigos();
                
                // Salvar tamb√©m no sessionStorage como backup adicional
                sessionStorage.setItem(STORAGE_KEY, dadosString);
                
                console.log('‚úÖ Dados salvos com sucesso em m√∫ltiplos locais');
            } catch (error) {
                console.error('‚ùå Erro ao salvar dados:', error);
                mostrarNotificacao('Erro ao salvar dados! Tentando novamente...', 'error');
                
                // Tentar salvar novamente ap√≥s 1 segundo
                setTimeout(() => {
                    try {
                        localStorage.setItem(STORAGE_KEY, JSON.stringify(sistemaUsuarios));
                        mostrarNotificacao('‚úÖ Dados salvos com sucesso na segunda tentativa!');
                    } catch (e) {
                        mostrarNotificacao('‚ùå Falha cr√≠tica ao salvar dados!', 'error');
                    }
                }, 1000);
            }
        }

        // Limpar backups antigos para n√£o ocupar muito espa√ßo
        function limparBackupsAntigos() {
            try {
                const agora = new Date();
                const setesDiasAtras = new Date(agora.getTime() - (7 * 24 * 60 * 60 * 1000));
                
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    if (key && key.startsWith(`${STORAGE_KEY}_`)) {
                        const dataString = key.split('_')[2];
                        const dataBackup = new Date(dataString);
                        
                        if (dataBackup < setesDiasAtras) {
                            localStorage.removeItem(key);
                        }
                    }
                }
            } catch (error) {
                console.log('Erro ao limpar backups antigos:', error);
            }
        }

        // Atualizar seletor de usu√°rios
        function atualizarSeletorUsuarios() {
            const seletor = document.getElementById('seletorUsuario');
            seletor.innerHTML = '<option value="">Escolha seu perfil</option>';
            
            Object.keys(sistemaUsuarios.usuarios).forEach(userId => {
                const usuario = sistemaUsuarios.usuarios[userId];
                const option = document.createElement('option');
                option.value = userId;
                option.textContent = userId === 'admin' ? 'üëë Administrador (Propriet√°rio)' : `üë§ ${usuario.nome}`;
                seletor.appendChild(option);
            });
        }

        // Fazer login
        function fazerLogin(userId, senha = null) {
            const usuario = sistemaUsuarios.usuarios[userId];
            
            if (!usuario) {
                mostrarNotificacao('Usu√°rio n√£o encontrado!', 'error');
                return false;
            }

            // Verificar senha se necess√°rio
            if (usuario.senhaHash && senha) {
                if (hashSenha(senha) !== usuario.senhaHash) {
                    mostrarNotificacao('Senha incorreta!', 'error');
                    return false;
                }
            } else if (usuario.senhaHash && !senha) {
                mostrarNotificacao('Senha obrigat√≥ria!', 'error');
                return false;
            }

            // Login bem-sucedido
            sistemaUsuarios.usuarioAtual = userId;
            dados = usuario.dados;
            
            document.getElementById('telaLogin').classList.add('hidden');
            document.getElementById('sistemaCompleto').classList.remove('hidden');
            document.getElementById('usuarioLogado').textContent = `Usu√°rio: ${usuario.nome}`;
            
            atualizarInterface();
            mostrarNotificacao(`Bem-vindo, ${usuario.nome}!`);
            return true;
        }

        // Fazer logout
        function fazerLogout() {
            // Salvar dados do usu√°rio atual antes de sair
            if (sistemaUsuarios.usuarioAtual) {
                sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados = dados;
                salvarSistemaUsuarios();
            }
            
            sistemaUsuarios.usuarioAtual = null;
            dados = {};
            
            document.getElementById('telaLogin').classList.remove('hidden');
            document.getElementById('sistemaCompleto').classList.add('hidden');
            
            // Limpar campos de login
            document.getElementById('seletorUsuario').value = '';
            document.getElementById('senhaLogin').value = '';
            document.getElementById('campoSenha').classList.add('hidden');
            document.getElementById('btnLogin').disabled = true;
            
            mostrarNotificacao('Logout realizado com sucesso!');
        }

        // Adicionar funcion√°rio
        function adicionarFuncionario(nome, senha) {
            const funcionarioId = nome.toLowerCase().replace(/\s+/g, '');
            
            if (sistemaUsuarios.usuarios[funcionarioId]) {
                mostrarNotificacao('J√° existe um funcion√°rio com este nome!', 'error');
                return false;
            }

            sistemaUsuarios.usuarios[funcionarioId] = {
                nome: nome,
                tipo: 'funcionario',
                senhaHash: hashSenha(senha),
                dados: {
                    clientes: [],
                    agendamentos: [],
                    transacoes: [],
                    anamneses: [],
                    configuracoes: {
                        lembrete24h: true,
                        lembrete2h: true,
                        autoBackup: false,
                        mensagemWhatsApp: `Ol√° {nome}! Lembrete do seu agendamento:

Servi√ßo: {servico}
Data: {data}
Hor√°rio: {hora}
Valor: {valor}

Nos vemos em breve no Studio LH! üé®`,
                        cores: {
                            agendado: '#3b82f6',
                            concluido: '#10b981',
                            cancelado: '#ef4444'
                        }
                    }
                }
            };

            salvarSistemaUsuarios();
            atualizarSeletorUsuarios();
            mostrarNotificacao(`Funcion√°rio ${nome} adicionado com sucesso!`);
            return true;
        }

        // Carregar dados do localStorage (adaptado para usu√°rios)
        function carregarDados() {
            // Os dados agora s√£o carregados no login
            if (sistemaUsuarios.usuarioAtual) {
                dados = sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados;
                atualizarInterface();
            }
        }

        // Salvar dados no localStorage com timestamp e backup autom√°tico
        function salvarDados() {
            if (sistemaUsuarios.usuarioAtual) {
                dados.ultimaAtualizacao = new Date().toISOString();
                sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados = dados;
                salvarSistemaUsuarios();
                atualizarStatusDb();
                
                // Salvar automaticamente a cada 30 segundos
                if (!window.autoSaveInterval) {
                    window.autoSaveInterval = setInterval(() => {
                        if (sistemaUsuarios.usuarioAtual) {
                            sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados = dados;
                            salvarSistemaUsuarios();
                            console.log('üíæ Auto-save realizado:', new Date().toLocaleTimeString());
                        }
                    }, 30000); // 30 segundos
                }
            }
        }

        // Salvar dados antes de fechar a p√°gina
        window.addEventListener('beforeunload', (e) => {
            if (sistemaUsuarios.usuarioAtual) {
                sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados = dados;
                salvarSistemaUsuarios();
                
                // Criar backup de emerg√™ncia
                try {
                    localStorage.setItem('studioLH_emergencyBackup', JSON.stringify(sistemaUsuarios));
                } catch (error) {
                    console.error('Erro ao criar backup de emerg√™ncia:', error);
                }
            }
        });

        // Salvar dados quando a p√°gina perde o foco
        window.addEventListener('blur', () => {
            if (sistemaUsuarios.usuarioAtual) {
                sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados = dados;
                salvarSistemaUsuarios();
            }
        });

        // Verificar integridade dos dados periodicamente
        setInterval(() => {
            verificarIntegridadeDados();
        }, 60000); // A cada 1 minuto

        function verificarIntegridadeDados() {
            try {
                const dadosVerificacao = localStorage.getItem(STORAGE_KEY);
                if (!dadosVerificacao) {
                    console.warn('‚ö†Ô∏è Dados principais n√£o encontrados, tentando restaurar...');
                    const backup = localStorage.getItem(BACKUP_KEY);
                    if (backup) {
                        localStorage.setItem(STORAGE_KEY, backup);
                        mostrarNotificacao('üîÑ Dados restaurados automaticamente do backup!');
                    }
                }
            } catch (error) {
                console.error('Erro na verifica√ß√£o de integridade:', error);
            }
        }

        // Atualizar status do banco de dados
        function atualizarStatusDb() {
            const dadosString = JSON.stringify(dados);
            const tamanhoKB = (new Blob([dadosString]).size / 1024).toFixed(2);
            const totalRegistros = dados.clientes.length + dados.agendamentos.length + dados.transacoes.length;
            
            document.getElementById('tamanhoDb').textContent = `${tamanhoKB} KB`;
            document.getElementById('totalRegistros').textContent = totalRegistros;
            
            // Contar backups dispon√≠veis
            let totalBackups = 0;
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && key.startsWith(`${STORAGE_KEY}_`)) {
                    totalBackups++;
                }
            }
            document.getElementById('totalBackups').textContent = totalBackups;
            
            if (dados.ultimaAtualizacao) {
                const dataFormatada = new Date(dados.ultimaAtualizacao).toLocaleString('pt-BR');
                document.getElementById('ultimaAtualizacao').textContent = dataFormatada;
            }
            
            atualizarListaBackups();
        }

        // Atualizar lista de backups
        function atualizarListaBackups() {
            const lista = document.getElementById('listaBackups');
            lista.innerHTML = '';
            
            const backups = [];
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && key.startsWith(`${STORAGE_KEY}_`)) {
                    const data = key.split('_')[2];
                    if (data && data !== 'undefined') {
                        backups.push({
                            key: key,
                            data: data,
                            timestamp: new Date(data)
                        });
                    }
                }
            }
            
            // Ordenar por data (mais recente primeiro)
            backups.sort((a, b) => b.timestamp - a.timestamp);
            
            backups.slice(0, 5).forEach(backup => {
                const div = document.createElement('div');
                div.className = 'flex justify-between items-center text-xs text-gray-400 bg-gray-800 p-2 rounded';
                div.innerHTML = `
                    <span>üìÖ ${backup.data}</span>
                    <button onclick="restaurarBackup('${backup.key}')" class="text-blue-400 hover:text-blue-300">
                        Restaurar
                    </button>
                `;
                lista.appendChild(div);
            });
            
            if (backups.length === 0) {
                lista.innerHTML = '<p class="text-xs text-gray-500 text-center py-2">Nenhum backup encontrado</p>';
            }
        }

        // Criar backup manual
        function criarBackupManual() {
            try {
                const timestamp = new Date().toISOString();
                const backupKey = `${STORAGE_KEY}_manual_${timestamp}`;
                localStorage.setItem(backupKey, JSON.stringify(sistemaUsuarios));
                
                atualizarStatusDb();
                mostrarNotificacao('‚úÖ Backup manual criado com sucesso!');
            } catch (error) {
                mostrarNotificacao('‚ùå Erro ao criar backup manual!', 'error');
            }
        }

        // Recuperar dados de emerg√™ncia
        function recuperarDados() {
            mostrarConfirmacao('Recuperar Dados', 'Isso ir√° tentar recuperar seus dados de backups autom√°ticos. Continuar?', () => {
                try {
                    // Tentar recuperar do backup principal
                    let dadosRecuperados = localStorage.getItem(BACKUP_KEY);
                    
                    if (!dadosRecuperados) {
                        // Tentar recuperar do backup de emerg√™ncia
                        dadosRecuperados = localStorage.getItem('studioLH_emergencyBackup');
                    }
                    
                    if (!dadosRecuperados) {
                        // Tentar recuperar do sessionStorage
                        dadosRecuperados = sessionStorage.getItem(STORAGE_KEY);
                    }
                    
                    if (!dadosRecuperados) {
                        // Procurar o backup mais recente
                        const backups = [];
                        for (let i = 0; i < localStorage.length; i++) {
                            const key = localStorage.key(i);
                            if (key && key.startsWith(`${STORAGE_KEY}_`)) {
                                const data = key.split('_')[2];
                                if (data && data !== 'undefined') {
                                    backups.push({
                                        key: key,
                                        timestamp: new Date(data)
                                    });
                                }
                            }
                        }
                        
                        if (backups.length > 0) {
                            backups.sort((a, b) => b.timestamp - a.timestamp);
                            dadosRecuperados = localStorage.getItem(backups[0].key);
                        }
                    }
                    
                    if (dadosRecuperados) {
                        sistemaUsuarios = JSON.parse(dadosRecuperados);
                        localStorage.setItem(STORAGE_KEY, dadosRecuperados);
                        
                        if (sistemaUsuarios.usuarioAtual) {
                            dados = sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados;
                            atualizarInterface();
                        }
                        
                        mostrarNotificacao('‚úÖ Dados recuperados com sucesso!');
                        atualizarSeletorUsuarios();
                    } else {
                        mostrarNotificacao('‚ùå Nenhum backup encontrado para recupera√ß√£o!', 'error');
                    }
                } catch (error) {
                    mostrarNotificacao('‚ùå Erro ao recuperar dados!', 'error');
                    console.error('Erro na recupera√ß√£o:', error);
                }
            });
        }

        // Restaurar backup espec√≠fico
        function restaurarBackup(backupKey) {
            mostrarConfirmacao('Restaurar Backup', `Deseja restaurar o backup de ${backupKey.split('_')[2]}? Isso ir√° substituir os dados atuais.`, () => {
                try {
                    const dadosBackup = localStorage.getItem(backupKey);
                    if (dadosBackup) {
                        sistemaUsuarios = JSON.parse(dadosBackup);
                        localStorage.setItem(STORAGE_KEY, dadosBackup);
                        
                        if (sistemaUsuarios.usuarioAtual) {
                            dados = sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual].dados;
                            atualizarInterface();
                        }
                        
                        mostrarNotificacao('‚úÖ Backup restaurado com sucesso!');
                        atualizarSeletorUsuarios();
                    } else {
                        mostrarNotificacao('‚ùå Backup n√£o encontrado!', 'error');
                    }
                } catch (error) {
                    mostrarNotificacao('‚ùå Erro ao restaurar backup!', 'error');
                }
            });
        }

        // Exportar dados
        function exportarDados() {
            const dataStr = JSON.stringify(dados, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `financeagenda-export-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            URL.revokeObjectURL(url);
            mostrarNotificacao('Dados exportados com sucesso!');
        }

        // Importar dados
        function importarDados(arquivo) {
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const dadosImportados = JSON.parse(e.target.result);
                    
                    // Validar estrutura dos dados
                    if (dadosImportados.clientes && dadosImportados.agendamentos && dadosImportados.transacoes) {
                        dados = {
                            ...dadosImportados,
                            configuracoes: {
                                ...dados.configuracoes,
                                ...dadosImportados.configuracoes
                            }
                        };
                        salvarDados();
                        atualizarInterface();
                        mostrarNotificacao('Dados importados com sucesso!');
                    } else {
                        throw new Error('Estrutura de dados inv√°lida');
                    }
                } catch (error) {
                    mostrarNotificacao('Erro ao importar dados. Arquivo inv√°lido.', 'error');
                }
            };
            reader.readAsText(arquivo);
        }

        // Mostrar notifica√ß√£o
        function mostrarNotificacao(mensagem, tipo = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification p-4 rounded-lg text-white ${tipo === 'success' ? 'bg-green-500' : 'bg-red-500'} shadow-lg`;
            notification.textContent = mensagem;
            
            document.getElementById('notifications').appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Formata√ß√£o de moeda
        function formatarMoeda(valor) {
            return new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL'
            }).format(valor);
        }

        // Formata√ß√£o de data
        function formatarData(data) {
            return new Date(data).toLocaleDateString('pt-BR');
        }

        // Fun√ß√µes de gerenciamento de usu√°rios
        function atualizarListaFuncionarios() {
            const lista = document.getElementById('listaFuncionarios');
            lista.innerHTML = '';
            
            Object.keys(sistemaUsuarios.usuarios).forEach(userId => {
                const usuario = sistemaUsuarios.usuarios[userId];
                if (usuario.tipo === 'funcionario') {
                    const div = document.createElement('div');
                    div.className = 'bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors';
                    div.innerHTML = `
                        <div class="flex justify-between items-center">
                            <div>
                                <h3 class="font-semibold text-gray-100">${usuario.nome}</h3>
                                <p class="text-sm text-gray-300">ID: ${userId}</p>
                                <p class="text-sm text-gray-400">Tipo: Funcion√°rio</p>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="resetarSenhaFuncionario('${userId}')" class="bg-yellow-600 text-white px-3 py-1 rounded text-sm hover:bg-yellow-700 transition-colors">
                                    üîë Reset Senha
                                </button>
                                <button onclick="removerFuncionario('${userId}')" class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition-colors">
                                    üóëÔ∏è Remover
                                </button>
                            </div>
                        </div>
                    `;
                    lista.appendChild(div);
                }
            });
        }

        function atualizarEstatisticasUsuarios() {
            const totalUsuarios = Object.keys(sistemaUsuarios.usuarios).length;
            const funcionariosAtivos = Object.keys(sistemaUsuarios.usuarios).filter(userId => 
                sistemaUsuarios.usuarios[userId].tipo === 'funcionario'
            ).length;
            
            document.getElementById('totalUsuarios').textContent = totalUsuarios;
            document.getElementById('funcionariosAtivos').textContent = funcionariosAtivos;
            
            if (sistemaUsuarios.usuarioAtual) {
                const usuario = sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual];
                document.getElementById('nomeUsuarioAtual').textContent = usuario.nome;
                document.getElementById('tipoUsuarioAtual').textContent = usuario.tipo === 'admin' ? 'Administrador' : 'Funcion√°rio';
            }
        }

        function resetarSenhaFuncionario(userId) {
            const novaSenha = prompt('Digite a nova senha para o funcion√°rio:');
            if (novaSenha && novaSenha.length >= 4) {
                sistemaUsuarios.usuarios[userId].senhaHash = hashSenha(novaSenha);
                salvarSistemaUsuarios();
                mostrarNotificacao(`Senha do funcion√°rio ${sistemaUsuarios.usuarios[userId].nome} foi alterada!`);
            } else if (novaSenha) {
                mostrarNotificacao('A senha deve ter pelo menos 4 caracteres!', 'error');
            }
        }

        function removerFuncionario(userId) {
            const funcionario = sistemaUsuarios.usuarios[userId];
            mostrarConfirmacao('Remover Funcion√°rio', `Tem certeza que deseja remover o funcion√°rio ${funcionario.nome}? Todos os dados dele ser√£o perdidos!`, () => {
                delete sistemaUsuarios.usuarios[userId];
                salvarSistemaUsuarios();
                atualizarSeletorUsuarios();
                atualizarListaFuncionarios();
                atualizarEstatisticasUsuarios();
                mostrarNotificacao(`Funcion√°rio ${funcionario.nome} removido com sucesso!`);
            });
        }

        // Navega√ß√£o entre abas
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const tabId = btn.dataset.tab;
                
                // Verificar se √© admin para mostrar aba de usu√°rios
                if (tabId === 'usuarios' && sistemaUsuarios.usuarioAtual !== 'admin') {
                    mostrarNotificacao('Apenas o administrador pode acessar esta se√ß√£o!', 'error');
                    return;
                }
                
                // Remover classe ativa de todas as abas
                document.querySelectorAll('.tab-btn').forEach(b => {
                    b.className = 'tab-btn flex-1 py-4 px-6 text-center font-medium text-gray-400 hover:text-blue-400 hover:bg-gray-700';
                });
                
                // Adicionar classe ativa na aba clicada
                btn.className = 'tab-btn flex-1 py-4 px-6 text-center font-medium text-blue-400 bg-gray-700 border-b-2 border-blue-400';
                
                // Esconder todos os conte√∫dos
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                
                // Mostrar conte√∫do da aba ativa
                document.getElementById(tabId).classList.add('active');
                
                // Atualizar estat√≠sticas se for a aba admin
                if (tabId === 'admin') {
                    atualizarEstatisticas();
                }
                
                // Atualizar status se for a aba configura√ß√µes
                if (tabId === 'configuracoes') {
                    atualizarStatusSenha();
                    atualizarStatusDb();
                }
                
                // Atualizar anamnese se for a aba anamnese
                if (tabId === 'anamnese') {
                    atualizarSelectClientesAnamnese();
                    atualizarListaAnamneses();
                }
                
                // Atualizar usu√°rios se for a aba usu√°rios
                if (tabId === 'usuarios') {
                    atualizarListaFuncionarios();
                    atualizarEstatisticasUsuarios();
                }
            });
        });

        // Fun√ß√µes de anamnese
        function selecionarModelo(modelo) {
            const campos = modelosAnamnese[modelo];
            const container = document.getElementById('camposAnamnese');
            container.innerHTML = '';
            
            campos.forEach(campo => {
                const div = document.createElement('div');
                div.className = 'space-y-2';
                
                let html = `<label class="block text-sm font-medium text-gray-300">${campo.label}${campo.obrigatorio ? ' *' : ''}</label>`;
                
                switch (campo.tipo) {
                    case 'text':
                    case 'email':
                    case 'tel':
                    case 'number':
                        html += `<input type="${campo.tipo}" name="${campo.nome}" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" ${campo.obrigatorio ? 'required' : ''}>`;
                        break;
                    case 'textarea':
                        html += `<textarea name="${campo.nome}" rows="3" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" ${campo.obrigatorio ? 'required' : ''}></textarea>`;
                        break;
                    case 'select':
                        html += `<select name="${campo.nome}" class="w-full p-3 dark-input rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-blue-400" ${campo.obrigatorio ? 'required' : ''}>
                            <option value="">Selecione...</option>
                            ${campo.opcoes.map(opcao => `<option value="${opcao}">${opcao}</option>`).join('')}
                        </select>`;
                        break;
                    case 'radio':
                        html += '<div class="space-y-2">';
                        campo.opcoes.forEach(opcao => {
                            html += `<label class="flex items-center space-x-2 text-gray-300">
                                <input type="radio" name="${campo.nome}" value="${opcao}" class="text-blue-600" ${campo.obrigatorio ? 'required' : ''}>
                                <span>${opcao}</span>
                            </label>`;
                        });
                        html += '</div>';
                        break;
                    case 'checkbox':
                        html += '<div class="space-y-2">';
                        campo.opcoes.forEach(opcao => {
                            html += `<label class="flex items-center space-x-2 text-gray-300">
                                <input type="checkbox" name="${campo.nome}" value="${opcao}" class="text-blue-600">
                                <span>${opcao}</span>
                            </label>`;
                        });
                        html += '</div>';
                        break;
                }
                
                div.innerHTML = html;
                container.appendChild(div);
            });
            
            mostrarNotificacao(`Modelo ${modelo} carregado!`);
        }

        // Formul√°rio de anamnese
        document.getElementById('anamneseForm').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const respostas = {};
            
            // Processar campos normais
            for (let [key, value] of formData.entries()) {
                if (respostas[key]) {
                    // Se j√° existe, transformar em array (para checkboxes)
                    if (Array.isArray(respostas[key])) {
                        respostas[key].push(value);
                    } else {
                        respostas[key] = [respostas[key], value];
                    }
                } else {
                    respostas[key] = value;
                }
            }
            
            const anamnese = {
                id: Date.now(),
                clienteId: parseInt(document.getElementById('clienteAnamnese').value),
                respostas: respostas,
                dataPreenchimento: new Date().toISOString(),
                modelo: 'personalizado' // Pode ser expandido para detectar o modelo usado
            };
            
            dados.anamneses.push(anamnese);
            salvarDados();
            atualizarListaAnamneses();
            
            document.getElementById('anamneseForm').reset();
            document.getElementById('camposAnamnese').innerHTML = '';
            mostrarNotificacao('Anamnese salva com sucesso!');
        });

        // Atualizar select de clientes para anamnese
        function atualizarSelectClientesAnamnese() {
            const select = document.getElementById('clienteAnamnese');
            select.innerHTML = '<option value="">Selecione um cliente</option>';
            
            dados.clientes.forEach(cliente => {
                const option = document.createElement('option');
                option.value = cliente.id;
                option.textContent = cliente.nome;
                select.appendChild(option);
            });
        }

        // Atualizar lista de anamneses
        function atualizarListaAnamneses() {
            const lista = document.getElementById('listaAnamneses');
            lista.innerHTML = '';
            
            dados.anamneses.slice().reverse().forEach(anamnese => {
                const cliente = dados.clientes.find(c => c.id === anamnese.clienteId);
                const div = document.createElement('div');
                div.className = 'bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors';
                div.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <h3 class="font-semibold text-gray-100">${cliente ? cliente.nome : 'Cliente n√£o encontrado'}</h3>
                            <p class="text-sm text-gray-300">Preenchida em: ${formatarData(anamnese.dataPreenchimento.split('T')[0])}</p>
                            <p class="text-sm text-gray-400">Modelo: ${anamnese.modelo}</p>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="visualizarAnamnese(${anamnese.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors">
                                üëÅÔ∏è Ver
                            </button>
                            <button onclick="removerAnamnese(${anamnese.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition-colors">
                                üóëÔ∏è Remover
                            </button>
                        </div>
                    </div>
                `;
                lista.appendChild(div);
            });
        }

        // Visualizar anamnese
        function visualizarAnamnese(id) {
            const anamnese = dados.anamneses.find(a => a.id === id);
            const cliente = dados.clientes.find(c => c.id === anamnese.clienteId);
            
            if (anamnese) {
                const modal = document.getElementById('anamneseModal');
                const conteudo = document.getElementById('conteudoAnamneseModal');
                
                let html = `
                    <div class="mb-4 p-4 bg-gray-700 rounded-lg">
                        <h4 class="text-lg font-semibold text-gray-100">Cliente: ${cliente ? cliente.nome : 'N√£o encontrado'}</h4>
                        <p class="text-gray-300">Data: ${formatarData(anamnese.dataPreenchimento.split('T')[0])}</p>
                    </div>
                    <div class="space-y-4">
                `;
                
                Object.entries(anamnese.respostas).forEach(([campo, resposta]) => {
                    const valorFormatado = Array.isArray(resposta) ? resposta.join(', ') : resposta;
                    html += `
                        <div class="p-3 bg-gray-700 rounded-lg">
                            <label class="block text-sm font-medium text-gray-300 mb-1">${campo.replace(/_/g, ' ').toUpperCase()}</label>
                            <p class="text-gray-100">${valorFormatado || 'N√£o informado'}</p>
                        </div>
                    `;
                });
                
                html += '</div>';
                conteudo.innerHTML = html;
                modal.classList.remove('hidden');
                modal.classList.add('flex');
            }
        }

        // Remover anamnese
        function removerAnamnese(id) {
            mostrarConfirmacao('Remover Anamnese', 'Tem certeza que deseja remover esta anamnese?', () => {
                dados.anamneses = dados.anamneses.filter(a => a.id !== id);
                salvarDados();
                atualizarListaAnamneses();
                mostrarNotificacao('Anamnese removida com sucesso!');
            });
        }

        // Fechar modal de anamnese
        document.getElementById('fecharAnamneseModal').addEventListener('click', () => {
            document.getElementById('anamneseModal').classList.add('hidden');
            document.getElementById('anamneseModal').classList.remove('flex');
        });

        // Busca de anamneses
        document.getElementById('searchAnamnese').addEventListener('input', (e) => {
            const termo = e.target.value.toLowerCase();
            const anamnesesFiltradas = dados.anamneses.filter(anamnese => {
                const cliente = dados.clientes.find(c => c.id === anamnese.clienteId);
                return cliente && cliente.nome.toLowerCase().includes(termo);
            });
            
            const lista = document.getElementById('listaAnamneses');
            lista.innerHTML = '';
            
            anamnesesFiltradas.slice().reverse().forEach(anamnese => {
                const cliente = dados.clientes.find(c => c.id === anamnese.clienteId);
                const div = document.createElement('div');
                div.className = 'bg-gray-700 rounded-lg p-4 hover:bg-gray-600 transition-colors';
                div.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <h3 class="font-semibold text-gray-100">${cliente ? cliente.nome : 'Cliente n√£o encontrado'}</h3>
                            <p class="text-sm text-gray-300">Preenchida em: ${formatarData(anamnese.dataPreenchimento.split('T')[0])}</p>
                            <p class="text-sm text-gray-400">Modelo: ${anamnese.modelo}</p>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="visualizarAnamnese(${anamnese.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors">
                                üëÅÔ∏è Ver
                            </button>
                            <button onclick="removerAnamnese(${anamnese.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition-colors">
                                üóëÔ∏è Remover
                            </button>
                        </div>
                    </div>
                `;
                lista.appendChild(div);
            });
        });

        // Configura√ß√£o de senha
        document.getElementById('senhaForm').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const senhaAtual = document.getElementById('senhaAtual').value;
            const novaSenha = document.getElementById('novaSenha').value;
            const confirmarSenha = document.getElementById('confirmarSenha').value;
            
            // Verificar se as senhas coincidem
            if (novaSenha !== confirmarSenha) {
                mostrarNotificacao('As senhas n√£o coincidem!', 'error');
                return;
            }
            
            // Se j√° existe senha, verificar a atual
            if (dados.configuracoes.senhaHash && senhaAtual) {
                if (hashSenha(senhaAtual) !== dados.configuracoes.senhaHash) {
                    mostrarNotificacao('Senha atual incorreta!', 'error');
                    return;
                }
            }
            
            // Definir nova senha
            dados.configuracoes.senhaHash = hashSenha(novaSenha);
            salvarDados();
            
            document.getElementById('senhaForm').reset();
            atualizarStatusSenha();
            mostrarNotificacao('Senha configurada com sucesso!');
        });

        // Exportar e importar dados
        document.getElementById('exportarDados').addEventListener('click', exportarDados);
        
        document.getElementById('importarDados').addEventListener('click', () => {
            document.getElementById('arquivoImportar').click();
        });
        
        document.getElementById('arquivoImportar').addEventListener('change', (e) => {
            const arquivo = e.target.files[0];
            if (arquivo) {
                importarDados(arquivo);
            }
        });

        // A√ß√µes avan√ßadas
        document.getElementById('limparCache').addEventListener('click', () => {
            mostrarConfirmacao('Limpar Cache', 'Isso ir√° limpar dados tempor√°rios. Continuar?', () => {
                // Limpar cache do navegador (simulado)
                if ('caches' in window) {
                    caches.keys().then(names => {
                        names.forEach(name => {
                            caches.delete(name);
                        });
                    });
                }
                mostrarNotificacao('Cache limpo com sucesso!');
            });
        });

        document.getElementById('resetarApp').addEventListener('click', () => {
            mostrarConfirmacao('Resetar Aplicativo', 'ATEN√á√ÉO: Isso ir√° apagar TODOS os dados! Esta a√ß√£o n√£o pode ser desfeita!', () => {
                localStorage.clear();
                location.reload();
            });
        });

        document.getElementById('testarConexao').addEventListener('click', () => {
            // Simular teste de conex√£o
            mostrarNotificacao('Testando conex√£o...');
            setTimeout(() => {
                if (navigator.onLine) {
                    mostrarNotificacao('Conex√£o OK! Sistema funcionando normalmente.');
                } else {
                    mostrarNotificacao('Sem conex√£o com a internet. Funcionando offline.', 'error');
                }
            }, 1500);
        });

        // Atualizar status da senha
        function atualizarStatusSenha() {
            const statusDiv = document.getElementById('senhaStatus');
            if (dados.configuracoes.senhaHash) {
                statusDiv.className = 'p-4 bg-green-900 border border-green-600 rounded-lg';
                statusDiv.innerHTML = '<p class="text-green-200">‚úÖ Senha configurada. Seus dados est√£o protegidos.</p>';
            } else {
                statusDiv.className = 'p-4 bg-yellow-900 border border-yellow-600 rounded-lg';
                statusDiv.innerHTML = '<p class="text-yellow-200">‚ö†Ô∏è Nenhuma senha configurada. Configure uma senha para proteger seus dados.</p>';
            }
        }

        // Cadastro de clientes
        document.getElementById('clienteForm').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const cliente = {
                id: Date.now(),
                nome: document.getElementById('nomeCliente').value,
                email: document.getElementById('emailCliente').value,
                telefone: document.getElementById('telefoneCliente').value,
                endereco: document.getElementById('enderecoCliente').value,
                dataCadastro: new Date().toISOString()
            };
            
            dados.clientes.push(cliente);
            salvarDados();
            atualizarListaClientes();
            atualizarSelectClientes();
            
            document.getElementById('clienteForm').reset();
            mostrarNotificacao('Cliente cadastrado com sucesso!');
        });

        // Agendamento de servi√ßos
        document.getElementById('agendamentoForm').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const valor = parseFloat(document.getElementById('valorInput').value);
            const imagemFile = document.getElementById('imagemInput').files[0];
            
            const agendamento = {
                id: Date.now(),
                clienteId: parseInt(document.getElementById('clienteSelect').value),
                servico: document.getElementById('servicoInput').value,
                data: document.getElementById('dataInput').value,
                hora: document.getElementById('horaInput').value,
                valor: valor,
                observacoes: document.getElementById('observacoesInput').value,
                status: 'agendado',
                dataCriacao: new Date().toISOString()
            };

            // Processar imagem se fornecida
            if (imagemFile) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    agendamento.imagem = e.target.result;
                    finalizarAgendamento(agendamento, valor);
                };
                reader.readAsDataURL(imagemFile);
            } else {
                finalizarAgendamento(agendamento, valor);
            }
        });

        function finalizarAgendamento(agendamento, valor) {
            dados.agendamentos.push(agendamento);
            
            // Adicionar receita automaticamente
            const transacao = {
                id: Date.now() + 1,
                tipo: 'receita',
                descricao: `Agendamento: ${agendamento.servico}`,
                valor: valor,
                data: agendamento.data,
                categoria: 'servicos'
            };
            
            dados.transacoes.push(transacao);
            salvarDados();
            
            atualizarListaAgendamentos();
            atualizarFinanceiro();
            
            document.getElementById('agendamentoForm').reset();
            mostrarNotificacao('Agendamento criado e receita adicionada!');
        }

        // Transa√ß√µes financeiras
        document.getElementById('transacaoForm').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const transacao = {
                id: Date.now(),
                tipo: document.getElementById('tipoTransacao').value,
                descricao: document.getElementById('descricaoTransacao').value,
                valor: parseFloat(document.getElementById('valorTransacao').value),
                data: document.getElementById('dataTransacao').value,
                categoria: document.getElementById('categoriaTransacao').value
            };
            
            dados.transacoes.push(transacao);
            salvarDados();
            atualizarListaTransacoes();
            atualizarFinanceiro();
            
            document.getElementById('transacaoForm').reset();
            mostrarNotificacao('Transa√ß√£o adicionada com sucesso!');
        });

        // Atualizar lista de clientes
        function atualizarListaClientes() {
            const lista = document.getElementById('listaClientes');
            lista.innerHTML = '';
            
            dados.clientes.forEach(cliente => {
                const div = document.createElement('div');
                div.className = 'bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors';
                div.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <h3 class="font-semibold text-gray-800">${cliente.nome}</h3>
                            <p class="text-sm text-gray-600">${cliente.email || 'Sem email'}</p>
                            <p class="text-sm text-gray-600">${cliente.telefone}</p>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="enviarWhatsApp('${cliente.telefone}', '${cliente.nome}')" class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors">
                                WhatsApp
                            </button>
                            <button onclick="removerCliente(${cliente.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition-colors">
                                Remover
                            </button>
                        </div>
                    </div>
                `;
                lista.appendChild(div);
            });
        }

        // Atualizar select de clientes
        function atualizarSelectClientes() {
            const select = document.getElementById('clienteSelect');
            select.innerHTML = '<option value="">Selecione um cliente</option>';
            
            dados.clientes.forEach(cliente => {
                const option = document.createElement('option');
                option.value = cliente.id;
                option.textContent = cliente.nome;
                select.appendChild(option);
            });
        }

        // Atualizar lista de agendamentos
        function atualizarListaAgendamentos() {
            const lista = document.getElementById('listaAgendamentos');
            lista.innerHTML = '';
            
            dados.agendamentos.forEach(agendamento => {
                const cliente = dados.clientes.find(c => c.id === agendamento.clienteId);
                const div = document.createElement('div');
                div.className = 'bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors';
                div.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <div class="flex items-center space-x-2 mb-2">
                                <h3 class="font-semibold text-gray-800">${agendamento.servico}</h3>
                                <span class="px-2 py-1 text-white text-xs rounded-full" style="background-color: ${obterCorStatus(agendamento.status)}">${agendamento.status}</span>
                            </div>
                            <p class="text-sm text-gray-600">Cliente: ${cliente ? cliente.nome : 'Cliente n√£o encontrado'}</p>
                            <p class="text-sm text-gray-600">Data: ${formatarData(agendamento.data)} √†s ${agendamento.hora}</p>
                            <p class="text-sm font-semibold text-green-600">Valor: ${formatarMoeda(agendamento.valor)}</p>
                            ${agendamento.observacoes ? `<p class="text-sm text-gray-500 mt-1">${agendamento.observacoes}</p>` : ''}
                            ${agendamento.imagem ? `<img src="${agendamento.imagem}" alt="Imagem do agendamento" class="mt-2 w-20 h-20 object-cover rounded">` : ''}
                        </div>
                        <div class="flex flex-col space-y-2">
                            <button onclick="enviarLembreteWhatsApp(${agendamento.id})" class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors">
                                Lembrete
                            </button>
                            <button onclick="concluirAgendamento(${agendamento.id})" class="bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition-colors">
                                Concluir
                            </button>
                            <button onclick="removerAgendamento(${agendamento.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition-colors">
                                Remover
                            </button>
                        </div>
                    </div>
                `;
                lista.appendChild(div);
            });
        }

        // Atualizar lista de transa√ß√µes
        function atualizarListaTransacoes() {
            const lista = document.getElementById('listaTransacoes');
            lista.innerHTML = '';
            
            dados.transacoes.slice().reverse().forEach(transacao => {
                const div = document.createElement('div');
                div.className = 'flex justify-between items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors';
                div.innerHTML = `
                    <div class="flex-1">
                        <h4 class="font-medium text-gray-800">${transacao.descricao}</h4>
                        <p class="text-sm text-gray-600">${formatarData(transacao.data)} - ${transacao.categoria}</p>
                    </div>
                    <div class="text-right">
                        <p class="font-semibold ${transacao.tipo === 'receita' ? 'text-green-600' : 'text-red-600'}">
                            ${transacao.tipo === 'receita' ? '+' : '-'} ${formatarMoeda(transacao.valor)}
                        </p>
                        <button onclick="removerTransacao(${transacao.id})" class="text-red-500 hover:text-red-700 text-sm">
                            Remover
                        </button>
                    </div>
                `;
                lista.appendChild(div);
            });
        }

        // Atualizar dados financeiros
        function atualizarFinanceiro() {
            const receitas = dados.transacoes.filter(t => t.tipo === 'receita').reduce((sum, t) => sum + t.valor, 0);
            const despesas = dados.transacoes.filter(t => t.tipo === 'despesa').reduce((sum, t) => sum + t.valor, 0);
            const saldo = receitas - despesas;
            
            const hoje = new Date();
            const mesAtual = hoje.getMonth();
            const anoAtual = hoje.getFullYear();
            
            const receitaMes = dados.transacoes
                .filter(t => {
                    const dataTransacao = new Date(t.data);
                    return t.tipo === 'receita' && 
                           dataTransacao.getMonth() === mesAtual && 
                           dataTransacao.getFullYear() === anoAtual;
                })
                .reduce((sum, t) => sum + t.valor, 0);
            
            document.getElementById('totalReceitas').textContent = formatarMoeda(receitas);
            document.getElementById('totalDespesas').textContent = formatarMoeda(despesas);
            document.getElementById('saldoAtual').textContent = formatarMoeda(saldo);
            document.getElementById('receitaMes').textContent = formatarMoeda(receitaMes);
            document.getElementById('totalBalance').textContent = formatarMoeda(saldo);
        }

        // Fun√ß√µes de WhatsApp
        function enviarWhatsApp(telefone, nome) {
            const mensagem = `Ol√° ${nome}! Como posso ajud√°-lo hoje?`;
            const url = `https://wa.me/55${telefone.replace(/\D/g, '')}?text=${encodeURIComponent(mensagem)}`;
            window.open(url, '_blank', 'noopener,noreferrer');
        }

        function enviarLembreteWhatsApp(agendamentoId) {
            const agendamento = dados.agendamentos.find(a => a.id === agendamentoId);
            const cliente = dados.clientes.find(c => c.id === agendamento.clienteId);
            
            if (cliente && agendamento) {
                let mensagem = dados.configuracoes.mensagemWhatsApp || `Ol√° {nome}! Lembrete do seu agendamento:

Servi√ßo: {servico}
Data: {data}
Hor√°rio: {hora}
Valor: {valor}

Nos vemos em breve no Studio LH! üé®`;
                
                // Substituir vari√°veis
                mensagem = mensagem
                    .replace(/{nome}/g, cliente.nome)
                    .replace(/{servico}/g, agendamento.servico)
                    .replace(/{data}/g, formatarData(agendamento.data))
                    .replace(/{hora}/g, agendamento.hora)
                    .replace(/{valor}/g, formatarMoeda(agendamento.valor));
                
                const url = `https://wa.me/55${cliente.telefone.replace(/\D/g, '')}?text=${encodeURIComponent(mensagem)}`;
                window.open(url, '_blank', 'noopener,noreferrer');
                mostrarNotificacao('Lembrete enviado via WhatsApp!');
            }
        }

        // Modal de mensagem WhatsApp
        document.getElementById('editarMensagemWhatsApp').addEventListener('click', () => {
            document.getElementById('mensagemWhatsApp').value = dados.configuracoes.mensagemWhatsApp || '';
            document.getElementById('whatsappModal').classList.remove('hidden');
            document.getElementById('whatsappModal').classList.add('flex');
        });

        document.getElementById('cancelarMensagem').addEventListener('click', () => {
            document.getElementById('whatsappModal').classList.add('hidden');
            document.getElementById('whatsappModal').classList.remove('flex');
        });

        document.getElementById('salvarMensagem').addEventListener('click', () => {
            dados.configuracoes.mensagemWhatsApp = document.getElementById('mensagemWhatsApp').value;
            salvarDados();
            document.getElementById('whatsappModal').classList.add('hidden');
            document.getElementById('whatsappModal').classList.remove('flex');
            mostrarNotificacao('Mensagem do WhatsApp salva!');
        });

        // Configura√ß√µes de cores
        document.getElementById('salvarCores').addEventListener('click', () => {
            dados.configuracoes.cores = {
                agendado: document.getElementById('corAgendado').value,
                concluido: document.getElementById('corConcluido').value,
                cancelado: document.getElementById('corCancelado').value
            };
            salvarDados();
            atualizarListaAgendamentos(); // Atualizar para aplicar as novas cores
            mostrarNotificacao('Cores personalizadas salvas!');
        });

        // Carregar cores salvas
        function carregarCores() {
            if (dados.configuracoes.cores) {
                document.getElementById('corAgendado').value = dados.configuracoes.cores.agendado;
                document.getElementById('corConcluido').value = dados.configuracoes.cores.concluido;
                document.getElementById('corCancelado').value = dados.configuracoes.cores.cancelado;
            }
        }

        // Obter cor do status
        function obterCorStatus(status) {
            const cores = dados.configuracoes.cores || {
                agendado: '#3b82f6',
                concluido: '#10b981',
                cancelado: '#ef4444'
            };
            
            switch (status) {
                case 'agendado':
                    return cores.agendado;
                case 'conclu√≠do':
                case 'concluido':
                    return cores.concluido;
                case 'cancelado':
                    return cores.cancelado;
                default:
                    return cores.agendado;
            }
        }

        // Fun√ß√µes de remo√ß√£o e a√ß√µes
        function removerCliente(id) {
            mostrarConfirmacao('Remover Cliente', 'Tem certeza que deseja remover este cliente?', () => {
                dados.clientes = dados.clientes.filter(c => c.id !== id);
                salvarDados();
                atualizarListaClientes();
                atualizarSelectClientes();
                mostrarNotificacao('Cliente removido com sucesso!');
            });
        }

        function removerAgendamento(id) {
            mostrarConfirmacao('Remover Agendamento', 'Tem certeza que deseja remover este agendamento?', () => {
                dados.agendamentos = dados.agendamentos.filter(a => a.id !== id);
                salvarDados();
                atualizarListaAgendamentos();
                mostrarNotificacao('Agendamento removido com sucesso!');
            });
        }

        function concluirAgendamento(id) {
            const agendamento = dados.agendamentos.find(a => a.id === id);
            if (agendamento) {
                agendamento.status = 'conclu√≠do';
                salvarDados();
                atualizarListaAgendamentos();
                mostrarNotificacao('Agendamento conclu√≠do!');
            }
        }

        function removerTransacao(id) {
            mostrarConfirmacao('Remover Transa√ß√£o', 'Tem certeza que deseja remover esta transa√ß√£o?', () => {
                dados.transacoes = dados.transacoes.filter(t => t.id !== id);
                salvarDados();
                atualizarListaTransacoes();
                atualizarFinanceiro();
                mostrarNotificacao('Transa√ß√£o removida com sucesso!');
            });
        }

        // Modal de confirma√ß√£o
        function mostrarConfirmacao(titulo, mensagem, callback) {
            document.getElementById('confirmTitle').textContent = titulo;
            document.getElementById('confirmMessage').textContent = mensagem;
            document.getElementById('confirmModal').classList.remove('hidden');
            document.getElementById('confirmModal').classList.add('flex');
            
            document.getElementById('confirmOk').onclick = () => {
                callback();
                fecharConfirmacao();
            };
        }

        function fecharConfirmacao() {
            document.getElementById('confirmModal').classList.add('hidden');
            document.getElementById('confirmModal').classList.remove('flex');
        }

        document.getElementById('confirmCancel').addEventListener('click', fecharConfirmacao);

        // Filtros de agendamento
        document.getElementById('filtroHoje').addEventListener('click', () => {
            filtrarAgendamentos('hoje');
            document.getElementById('filtroHoje').className = 'px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors';
            document.getElementById('filtroSemana').className = 'px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors';
            document.getElementById('filtroTodos').className = 'px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors';
        });

        document.getElementById('filtroSemana').addEventListener('click', () => {
            filtrarAgendamentos('semana');
            document.getElementById('filtroHoje').className = 'px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors';
            document.getElementById('filtroSemana').className = 'px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors';
            document.getElementById('filtroTodos').className = 'px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors';
        });

        document.getElementById('filtroTodos').addEventListener('click', () => {
            filtrarAgendamentos('todos');
            document.getElementById('filtroHoje').className = 'px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors';
            document.getElementById('filtroSemana').className = 'px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors';
            document.getElementById('filtroTodos').className = 'px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors';
        });

        function filtrarAgendamentos(filtro) {
            // Esta fun√ß√£o pode ser expandida para filtrar os agendamentos
            atualizarListaAgendamentos();
        }

        // Busca de clientes
        document.getElementById('searchClientes').addEventListener('input', (e) => {
            const termo = e.target.value.toLowerCase();
            const clientesFiltrados = dados.clientes.filter(cliente => 
                cliente.nome.toLowerCase().includes(termo) ||
                cliente.email.toLowerCase().includes(termo) ||
                cliente.telefone.includes(termo)
            );
            
            const lista = document.getElementById('listaClientes');
            lista.innerHTML = '';
            
            clientesFiltrados.forEach(cliente => {
                const div = document.createElement('div');
                div.className = 'bg-gray-50 rounded-lg p-4 hover:bg-gray-100 transition-colors';
                div.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <h3 class="font-semibold text-gray-800">${cliente.nome}</h3>
                            <p class="text-sm text-gray-600">${cliente.email || 'Sem email'}</p>
                            <p class="text-sm text-gray-600">${cliente.telefone}</p>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="enviarWhatsApp('${cliente.telefone}', '${cliente.nome}')" class="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition-colors">
                                WhatsApp
                            </button>
                            <button onclick="removerCliente(${cliente.id})" class="bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition-colors">
                                Remover
                            </button>
                        </div>
                    </div>
                `;
                lista.appendChild(div);
            });
        });

        // Fun√ß√µes administrativas
        function atualizarEstatisticas() {
            const hoje = new Date().toISOString().split('T')[0];
            const agendamentosHoje = dados.agendamentos.filter(a => a.data === hoje).length;
            
            const mesAtual = new Date().getMonth();
            const anoAtual = new Date().getFullYear();
            const receitaMes = dados.transacoes
                .filter(t => {
                    const dataTransacao = new Date(t.data);
                    return t.tipo === 'receita' && 
                           dataTransacao.getMonth() === mesAtual && 
                           dataTransacao.getFullYear() === anoAtual;
                })
                .reduce((sum, t) => sum + t.valor, 0);
            
            document.getElementById('totalClientes').textContent = dados.clientes.length;
            document.getElementById('agendamentosHoje').textContent = agendamentosHoje;
            document.getElementById('receitaMesAdmin').textContent = formatarMoeda(receitaMes);
            document.getElementById('totalTransacoes').textContent = dados.transacoes.length;
        }

        // Backup e restaura√ß√£o
        document.getElementById('backupBtn').addEventListener('click', () => {
            const dataStr = JSON.stringify(dados, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `backup-financeagenda-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            URL.revokeObjectURL(url);
            mostrarNotificacao('Backup realizado com sucesso!');
        });

        document.getElementById('restoreBtn').addEventListener('click', () => {
            const file = document.getElementById('restoreFile').files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const dadosRestaurados = JSON.parse(e.target.result);
                        dados = dadosRestaurados;
                        salvarDados();
                        atualizarInterface();
                        mostrarNotificacao('Dados restaurados com sucesso!');
                    } catch (error) {
                        mostrarNotificacao('Erro ao restaurar dados. Arquivo inv√°lido.', 'error');
                    }
                };
                reader.readAsText(file);
            }
        });

        // Limpar dados
        document.getElementById('limparDados').addEventListener('click', () => {
            mostrarConfirmacao('Limpar Todos os Dados', 'ATEN√á√ÉO: Esta a√ß√£o ir√° remover TODOS os dados do sistema. Esta a√ß√£o n√£o pode ser desfeita!', () => {
                dados = {
                    clientes: [],
                    agendamentos: [],
                    transacoes: [],
                    configuracoes: {
                        lembrete24h: true,
                        lembrete2h: true
                    }
                };
                salvarDados();
                atualizarInterface();
                mostrarNotificacao('Todos os dados foram removidos!');
            });
        });

        // Exportar relat√≥rio
        document.getElementById('exportarRelatorio').addEventListener('click', () => {
            const relatorio = gerarRelatorio();
            const dataBlob = new Blob([relatorio], {type: 'text/plain'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `relatorio-${new Date().toISOString().split('T')[0]}.txt`;
            link.click();
            URL.revokeObjectURL(url);
            mostrarNotificacao('Relat√≥rio exportado com sucesso!');
        });

        function gerarRelatorio() {
            const receitas = dados.transacoes.filter(t => t.tipo === 'receita').reduce((sum, t) => sum + t.valor, 0);
            const despesas = dados.transacoes.filter(t => t.tipo === 'despesa').reduce((sum, t) => sum + t.valor, 0);
            const saldo = receitas - despesas;
            
            return `
RELAT√ìRIO FINANCEAGENDA PRO
Data: ${new Date().toLocaleDateString('pt-BR')}

=== RESUMO FINANCEIRO ===
Total de Receitas: ${formatarMoeda(receitas)}
Total de Despesas: ${formatarMoeda(despesas)}
Saldo Atual: ${formatarMoeda(saldo)}

=== ESTAT√çSTICAS ===
Total de Clientes: ${dados.clientes.length}
Total de Agendamentos: ${dados.agendamentos.length}
Total de Transa√ß√µes: ${dados.transacoes.length}

=== CLIENTES ===
${dados.clientes.map(c => `- ${c.nome} (${c.telefone})`).join('\n')}

=== AGENDAMENTOS RECENTES ===
${dados.agendamentos.slice(-10).map(a => {
    const cliente = dados.clientes.find(c => c.id === a.clienteId);
    return `- ${a.servico} - ${cliente ? cliente.nome : 'Cliente n√£o encontrado'} - ${formatarData(a.data)} - ${formatarMoeda(a.valor)}`;
}).join('\n')}
            `.trim();
        }

        // Atualizar interface completa
        function atualizarInterface() {
            atualizarListaClientes();
            atualizarSelectClientes();
            atualizarSelectClientesAnamnese();
            atualizarListaAgendamentos();
            atualizarListaTransacoes();
            atualizarListaAnamneses();
            atualizarFinanceiro();
            atualizarEstatisticas();
            atualizarStatusSenha();
            atualizarStatusDb();
            carregarCores();
            
            // Mostrar/ocultar aba de usu√°rios baseado no tipo de usu√°rio
            const tabUsuarios = document.getElementById('tabUsuarios');
            if (sistemaUsuarios.usuarioAtual === 'admin') {
                tabUsuarios.style.display = 'block';
            } else {
                tabUsuarios.style.display = 'none';
            }
        }

        // Definir data padr√£o para hoje
        document.getElementById('dataInput').value = new Date().toISOString().split('T')[0];
        document.getElementById('dataTransacao').value = new Date().toISOString().split('T')[0];

        // Eventos de login
        document.getElementById('seletorUsuario').addEventListener('change', (e) => {
            const userId = e.target.value;
            const campoSenha = document.getElementById('campoSenha');
            const btnLogin = document.getElementById('btnLogin');
            
            if (userId) {
                const usuario = sistemaUsuarios.usuarios[userId];
                if (usuario && usuario.senhaHash) {
                    campoSenha.classList.remove('hidden');
                    btnLogin.disabled = false;
                } else {
                    campoSenha.classList.add('hidden');
                    btnLogin.disabled = false;
                }
            } else {
                campoSenha.classList.add('hidden');
                btnLogin.disabled = true;
            }
        });

        document.getElementById('btnLogin').addEventListener('click', () => {
            const userId = document.getElementById('seletorUsuario').value;
            const senha = document.getElementById('senhaLogin').value;
            
            if (userId) {
                fazerLogin(userId, senha);
            }
        });

        document.getElementById('btnLogout').addEventListener('click', () => {
            mostrarConfirmacao('Fazer Logout', 'Deseja sair do sistema? Seus dados ser√£o salvos automaticamente.', () => {
                fazerLogout();
            });
        });

        document.getElementById('formNovoFuncionario').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const nome = document.getElementById('nomeFuncionario').value;
            const senha = document.getElementById('senhaFuncionario').value;
            
            if (adicionarFuncionario(nome, senha)) {
                document.getElementById('formNovoFuncionario').reset();
            }
        });

        // Formul√°rio adicionar funcion√°rio na aba usu√°rios
        document.getElementById('formAdicionarFuncionario').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const nome = document.getElementById('nomeNovoFuncionario').value;
            const senha = document.getElementById('senhaNovoFuncionario').value;
            
            if (adicionarFuncionario(nome, senha)) {
                document.getElementById('formAdicionarFuncionario').reset();
                atualizarListaFuncionarios();
                atualizarEstatisticasUsuarios();
            }
        });

        // Formul√°rio alterar senha do usu√°rio atual
        document.getElementById('formAlterarSenhaUsuario').addEventListener('submit', (e) => {
            e.preventDefault();
            
            const senhaAtual = document.getElementById('senhaAtualUsuario').value;
            const novaSenha = document.getElementById('novaSenhaUsuario').value;
            const confirmarSenha = document.getElementById('confirmarSenhaUsuario').value;
            
            const usuario = sistemaUsuarios.usuarios[sistemaUsuarios.usuarioAtual];
            
            // Verificar se as senhas coincidem
            if (novaSenha !== confirmarSenha) {
                mostrarNotificacao('As senhas n√£o coincidem!', 'error');
                return;
            }
            
            // Se j√° existe senha, verificar a atual
            if (usuario.senhaHash && senhaAtual) {
                if (hashSenha(senhaAtual) !== usuario.senhaHash) {
                    mostrarNotificacao('Senha atual incorreta!', 'error');
                    return;
                }
            }
            
            // Definir nova senha
            usuario.senhaHash = hashSenha(novaSenha);
            salvarSistemaUsuarios();
            
            document.getElementById('formAlterarSenhaUsuario').reset();
            mostrarNotificacao('Sua senha foi alterada com sucesso!');
        });

        // Permitir login com Enter
        document.getElementById('senhaLogin').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                document.getElementById('btnLogin').click();
            }
        });

        // Conectar eventos dos novos bot√µes
        document.getElementById('criarBackupManual').addEventListener('click', criarBackupManual);
        document.getElementById('recuperarDados').addEventListener('click', recuperarDados);

        // Inicializar aplica√ß√£o
        carregarSistemaUsuarios();
        
        // Mostrar mensagem de boas-vindas sobre o sistema de backup
        setTimeout(() => {
            if (!localStorage.getItem('studioLH_welcomeShown')) {
                mostrarNotificacao('üéâ Sistema de backup autom√°tico ativado! Seus dados est√£o seguros e nunca ser√£o perdidos.');
                localStorage.setItem('studioLH_welcomeShown', 'true');
            }
        }, 2000);
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98fd5fae92cff25e',t:'MTc2MDY3ODcxMC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
